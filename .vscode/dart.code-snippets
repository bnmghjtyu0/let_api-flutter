{
  "Stateless widget snippet": {
    "prefix": "stl",
    "body": [
      "class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} extends StatelessWidget {",
      "const ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}({ Key? key }) : super(key: key);",
      "",
      "  @override",
      "  Widget build(BuildContext context){",
      "    return ${2:Container}(${0});",
      "  }",
      "}"
    ],
    "description": "StatelessWidget snippet"
  },
  "Stateful widget snippet": {
    "prefix": "stf",
    "description": "Insert a StatefulWidget",
    "body": [
      "class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} extends StatefulWidget {",
      "  const ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}({ Key? key }) : super(key: key);",
      "",
      "  @override",
      "  State<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}> createState() => ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}State();",
      "}",
      "",
      "class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}State extends State<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}> {",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Container(",
      "      $2",
      "    );",
      "  }",
      "}"
    ]
  },
  "Scaffold widget snippet": {
    "prefix": "scaffold",
    "body": [
      "Scaffold(",
      "  appBar: AppBar(",
      "    title: ${1:const} Text('${2:Title}'),",
      "  ),",
      "  body: ${3:Container()},",
      ");"
    ],
    "description": "Scaffold widget snippet"
  },
  "EdgeInsets widget snippet with named constructor `all`": {
    "prefix": "edgeall",
    "body": ["EdgeInsets.all(${1:32.0})${0}"],
    "description": "EdgeInsets widget snippet with named constructor `all`"
  },
  "Text widget snippet": {
    "prefix": "text",
    "body": ["${1:const} Text('${2:text}')${0}"],
    "description": "Text widget snippet"
  },
  "Flutter initState lifecycle method snippet": {
    "prefix": "initState",
    "body": [
      "@override",
      "void initState() {",
      "  super.initState();",
      "  ${0}",
      "}"
    ],
    "description": "Flutter initState lifecycle method"
  },
  "Flutter Icon widget snippet": {
    "prefix": "icon",
    "body": ["Icon(Icons.${1:clear})${0}"],
    "description": "Flutter Icon widget snippet"
  },
  "Flutter Container widget snippet": {
    "prefix": "container",
    "body": ["Container(", "  child: $1,", ")"],
    "description": "Flutter Container widget snippet"
  },
  "Flutter Center widget snippet": {
    "prefix": "center",
    "body": ["Center(", "  child: $1,", ")"],
    "description": "Flutter Center widget snippet"
  },
  "Flutter Flex widget snippet": {
    "prefix": "flex",
    "body": ["Flexible(", "  child: $1,", ")"],
    "description": "Flutter Center widget snippet"
  },
  "Flutter Row widget snippet": {
    "prefix": "row",
    "body": ["Row(", "  children: <Widget>[${0}],", ")"],
    "description": "Flutter Row widget snippet"
  },
  "Flutter Column widget snippet": {
    "prefix": "col",
    "body": ["Column(", "  children: <Widget>[${0}],", ")"],
    "description": "Flutter Column widget snippet"
  },
  "SizedBox widget snippet with width and height arguments": {
    "prefix": "sizedboxall",
    "body": ["SizedBox(width: ${1:0.0}, height: ${2:0.0})${0}"],
    "description": "SizedBox widget with width and height arguments"
  },
  "Expand widget snippet": {
    "prefix": "expanded",
    "body": ["Expanded(", "  child: ${1:null},${0}", ")"],
    "description": "Expand widget snippet"
  },
  "EdgeInsets widget snippet with named constructor `only`": {
    "prefix": "edgeonly",
    "body": ["EdgeInsets.only(${1})${0}"],
    "description": "EdgeInsets widget snippet with named constructor `only`"
  },
  "EdgeInsets widget snippet with symmetric horizontal": {
    "prefix": "edgesymhorizontal",
    "body": ["EdgeInsets.symmetric( horizontal: ${2:8.0},)${0}"],
    "description": "EdgeInsets widget snippet with named constructor `symmetric`"
  },
  "EdgeInsets widget snippet with symmetric vertial": {
    "prefix": "edgesymvertial",
    "body": ["EdgeInsets.symmetric(vertical: ${1:8.0}"],
    "description": "EdgeInsets widget snippet with named constructor `symmetric`"
  },
  "Dart `List` collection snippet": {
    "prefix": "dlist",
    "body": ["List<num> listName = [1, 2, 3];"],
    "description": "Dart `List` collection snippet"
  },
  "Dart `Map` collection snippet": {
    "prefix": "dmap",
    "body": ["Map<${1:dynamic}, ${2:dynamic}> ${3:mapName}${0}"],
    "description": "Dart `Map` collection snippet"
  },
  "Dart `Set` collection snippet": {
    "prefix": "dset",
    "body": ["Set<${1:dynamic}> ${2:setName}${0}"],
    "description": "Dart `Set` collection snippet"
  },
  "Dart arrow function getter snippet": {
    "prefix": "dgetter",
    "body": ["${1:dynamic} get ${2:name} => ${3:returnValue};${0}"],
    "description": "Dart arrow function getter snippet"
  },
  "Dart `import as` snippet": {
    "prefix": "importas",
    "body": ["import '${1:packageName}' as ${2:alias}${0};"],
    "description": "Dart `import as` snippet"
  },
  "Dart `import show` snippet": {
    "prefix": "importshow",
    "body": ["import '${1:packageName}' show ${2:member}${0};"],
    "description": "Dart `import show` snippet"
  },
  "Dart `import deffered as` snippet": {
    "prefix": "importlazy",
    "body": ["import '${1:packageName}' deferred as ${2:alias}${0};"],
    "description": "Dart `import deffered as` snippet"
  },
  "Dart `import hide` snippet": {
    "prefix": "importhide",
    "body": ["import '${1:packageName}' hide ${2:excludedMember}${0};"],
    "description": "Dart `import hide` snippet"
  },
  "Dart `export hide` snippet": {
    "prefix": "exporthide",
    "body": ["export '${1:file}' hide ${2:excludedMember}${0};"],
    "description": "Dart `export hide` snippet"
  },
  "Dart `export show` snippet": {
    "prefix": "exportshow",
    "body": ["export '${1:file}' show ${2:member}${0};"],
    "description": "Dart `export show` snippet"
  },
  "Flutter StreamBuilder widget snippet": {
    "prefix": "streambuilder",
    "body": [
      "StreamBuilder<${1:dynamic}>(        ",
      "  stream: ${2:yourStream},",
      "  builder: (BuildContext context, AsyncSnapshot<${1:dynamic}> snapshot) {",
      "      if (snapshot.hasData) {",
      "       // TODO: do something with the data",
      "       return ${3:Container()};",
      "      } else if (snapshot.hasError) {",
      "      // TODO: do something with the error",
      "       return ${4:Text(snapshot.error.toString())};",
      "      }",
      "      // TODO: the data is not ready, show a loading indicator",
      "      return ${5:Center(child: CircularProgressIndicator())};",
      "   },",
      ")"
    ],
    "description": "Flutter StreamBuilder widget snippet"
  },

  "Flutter ElevatedButton snippet": {
    "prefix": "btnelevated",
    "body": [
      "ElevatedButton(",
      "  child: const Text('${1:Button label}'),",
      "  onPressed: () {},",
      ")${0}"
    ],
    "description": "Flutter ElevatedButton snippet"
  },
  "Flutter OutlinedButton snippet": {
    "prefix": "btnoutlined",
    "body": [
      "OutlinedButton(",
      "  child: const Text('${1:Button label}'),",
      "  onPressed: () {},",
      ")${0}"
    ],
    "description": "Flutter ElevatedButton snippet"
  },
  "Flutter TextButton snippet": {
    "prefix": "btntextbutton",
    "body": [
      "TextButton(",
      "  child: const Text('${1:Button label}'),",
      "  onPressed: () {},",
      ")${0}"
    ],
    "description": "Flutter ElevatedButton snippet"
  },
  "Flutter link snippet": {
    "prefix": "btnlink",
    "body": [
      " RichText(",
      " text: TextSpan(",
      " recognizer: TapGestureRecognizer()",
      " ..onTap = () {",
      " launchUrl(Uri.parse(",
      " 'https://www.google.com'));",
      " // GoRouter.of(context)",
      " //     .go(ScreenPaths.register());",
      " },",
      " text: 'google',",
      " style: TextStyle(",
      " fontWeight: FontWeight.normal,",
      " fontSize: 18,",
      " color: Colors.blue,",
      " decoration: TextDecoration.underline))),"
    ],
    "description": "Flutter ElevatedButton snippet"
  },
  "Flutter btn label snippet": {
    "prefix": "btnlabel",
    "body": [
      "          SizedBox(",
      "            height: 30,",
      "            child: ElevatedButton(",
      "              onPressed: () {",
      "                myMethod(suggestList[i]);",
      "              },",
      "              style: ButtonStyle(",
      "                shadowColor: MaterialStateProperty.all(Colors.transparent),",
      "                foregroundColor:",
      "                    MaterialStateProperty.all(Color.fromRGBO(0, 0, 0, 1)),",
      "                backgroundColor: MaterialStateProperty.all(",
      "                    Color.fromRGBO(255, 255, 255, 0.947)),",
      "              ),",
      "              child: Text('label'),",
      "            ),",
      "          )"
    ],
    "description": "Flutter ElevatedButton snippet"
  },
  "col-2 snippet": {
    "prefix": "col-2",
    "body": [
      "SizedBox(",
      " width: MediaQuery.of(context).size.width * 6 / 12,",
      " child: Text('123'),",
      ")"
    ],
    "description": "Flutter ElevatedButton snippet"
  },
  "col-3 snippet": {
    "prefix": "col-3",
    "body": [
      "SizedBox(",
      " width: MediaQuery.of(context).size.width * 4 / 12,",
      " child: Text('123'),",
      ")"
    ],
    "description": "Flutter ElevatedButton snippet"
  },
  "col-4 snippet": {
    "prefix": "col-4",
    "body": [
      "SizedBox(",
      " width: MediaQuery.of(context).size.width * 3 / 12,",
      " child: Text('123'),",
      ")"
    ],
    "description": "Flutter ElevatedButton snippet"
  },
  "col-5 snippet": {
    "prefix": "col-5",
    "body": [
      "SizedBox(",
      " width: MediaQuery.of(context).size.width * 2 / 10,",
      " child: Text('123'),",
      ")"
    ],
    "description": "Flutter ElevatedButton snippet"
  },
  "col-6 snippet": {
    "prefix": "col-6",
    "body": [
      "SizedBox(",
      " width: MediaQuery.of(context).size.width * 2 / 12,",
      " child: Text('123'),",
      ")"
    ],
    "description": "Flutter ElevatedButton snippet"
  },
  "forloop snippet": {
    "prefix": "forloop",
    "body": ["for(int i=0;i< 6;i++) "],
    "description": "Flutter ElevatedButton snippet"
  },
  "label snippet": {
    "prefix": "label",
    "body": [
      "Chip(",
      "  avatar: CircleAvatar(",
      "      backgroundColor: Colors.blue, child: Text('M')),",
      "  label: Text('Lafayette')",
      ")"
    ],
    "description": "Flutter ElevatedButton snippet"
  },
  "borderall snippet": {
    "prefix": "borderall",
    "body": ["Border.all(color: Colors.black)"],
    "description": "Flutter ElevatedButton snippet"
  },
  "borderonly snippet": {
    "prefix": "borderonly",
    "body": [
      "Border(",
      "            right: BorderSide(",
      "              color: Colors.black,",
      "              width: 3.0,",
      "            ),",
      "          )"
    ],
    "description": "Flutter ElevatedButton snippet"
  },
  "borderLeft snippet": {
    "prefix": "borderleft",
    "body": [
      "Border(",
      "            left: BorderSide(",
      "              color: Colors.black,",
      "              width: 3.0,",
      "            ),",
      "          )"
    ],
    "description": "Flutter ElevatedButton snippet"
  },
  "borderRight snippet": {
    "prefix": "borderright",
    "body": [
      "Border(",
      "            right: BorderSide(",
      "              color: Colors.black,",
      "              width: 3.0,",
      "            ),",
      "          )"
    ],
    "description": "Flutter ElevatedButton snippet"
  },
  "borderBottom snippet": {
    "prefix": "borderbottom",
    "body": [
      "Border(",
      "            bottom: BorderSide(",
      "              color: Colors.black,",
      "              width: 3.0,",
      "            ),",
      "          )"
    ],
    "description": "Flutter ElevatedButton snippet"
  },
  "borderTop snippet": {
    "prefix": "bordertop",
    "body": [
      "Border(",
      "            top: BorderSide(",
      "              color: Colors.black,",
      "              width: 3.0,",
      "            ),",
      "          )"
    ],
    "description": "Flutter ElevatedButton snippet"
  },

  "border radius all snippet": {
    "prefix": "borderradiusall",
    "body": ["BorderRadius.all(Radius.circular(10))"],
    "description": "Flutter ElevatedButton snippet"
  },
  "width 100% all snippet": {
    "prefix": "width100",
    "body": ["double.infinity"],
    "description": "Flutter ElevatedButton snippet"
  },
  "border radius top left snippet": {
    "prefix": "borderradiustop",
    "body": [
      "BorderRadius.only(",
      " topLeft: Radius.circular(10.0),",
      " topRight: Radius.circular(10.0),",
      ")"
    ],
    "description": "Flutter ElevatedButton snippet"
  },
  "listtile style1 snippet": {
    "prefix": "listtilestyle1",
    "body": [
      "ListTile(",
      " leading: CircleAvatar(child: Text('B')),",
      "            title: Text('Headline'),",
      "            subtitle: Text(",
      "                'Longer supporting text to demonstrate how the text wraps and how the leading and trailing widgets are centered vertically with the text.'),",
      "            trailing: Icon(Icons.favorite_rounded),",
      "          )"
    ],
    "description": "Flutter ElevatedButton snippet"
  },
  "scroll listview snippet": {
    "prefix": "listviewscroll",
    "body": [
      "        Expanded(",
      "          child: SizedBox(",
      "              width: double.infinity,",
      "              child: SingleChildScrollView(",
      "                  physics: BouncingScrollPhysics(),",
      "                  child: ListView(",
      "                    primary: false,",
      "                    shrinkWrap: true,",
      "                    children: <Widget>[",
      "                      for (int i = 0; i < 16; i++)",
      "                        Column(",
      "                          children: [",
      "                            ListTile(",
      "                              leading: CircleAvatar(child: Text('A')),",
      "                              title: Text(i.toString()),",
      "                              subtitle: Text('Supporting text'),",
      "                              trailing: Icon(Icons.favorite_rounded),",
      "                            ),",
      "                            Divider(height: 0)",
      "                          ],",
      "                        )",
      "                    ],",
      "                  ))),",
      "        )"
    ],
    "description": "Flutter ElevatedButton snippet"
  },
  "scroll listview picture snippet": {
    "prefix": "listviewscrollpicture",
    "body": [
      "        Expanded(",
      "          child: SizedBox(",
      "              width: double.infinity,",
      "              child: SingleChildScrollView(",
      "                  physics: BouncingScrollPhysics(),",
      "                  child: ListView(",
      "                    primary: false,",
      "                    shrinkWrap: true,",
      "                    children: <Widget>[",
      "                      for (int i = 0; i < 16; i++)",
      "                        Column(",
      "                          children: [",
      "                            ListTile(",
      "                              leading: Container(",
      "                                width: 160 / 1.5,",
      "                                height: 90 / 1.5,",
      "                                color: Colors.grey.shade400,",
      "                              ),",
      "                              contentPadding: EdgeInsets.symmetric(",
      "                                  vertical: 4.0, horizontal: 8.0),",
      "                              title: Padding(",
      "                                  padding: const EdgeInsets.only(bottom: 8.0),",
      "                                  child: Text(",
      "                                      style: TextStyle(",
      "                                          overflow: TextOverflow.ellipsis),",
      "                                      '野原廣志爽吃助餐  $i')),",
      "                              subtitle: Row(children: [",
      "                                SizedBox(",
      "                                  height: 30,",
      "                                  width: 30,",
      "                                  child: CircleAvatar(",
      "                                    backgroundColor: Colors.grey.shade200,",
      "                                    foregroundImage: NetworkImage(",
      "                                        \"https://cdn2.ettoday.net/images/3353/3353619.jpg\"),",
      "                                    maxRadius: 15,",
      "                                    minRadius: 15,",
      "                                  ),",
      "                                ),",
      "                                SizedBox(",
      "                                  width: 8,",
      "                                ),",
      "                                Flexible(",
      "                                    child: Text(",
      "                                  'Supporting text Supporting text Supporting text Supporting text Supporting text Supporting text',",
      "                                  style: TextStyle(",
      "                                      overflow: TextOverflow.ellipsis,",
      "                                      color: $styles.colors.mlgrey200),",
      "                                  maxLines: 2,",
      "                                ))",
      "                              ]),",
      "                              onTap: () {",
      "                                print('爽吃自助餐');",
      "                              },",
      "                            ),",
      "                          ],",
      "                        )",
      "                    ],",
      "                  ))),",
      "        )"
    ],
    "description": "Flutter ElevatedButton snippet"
  },
  "hr snippet": {
    "prefix": "hr",
    "body": ["Divider(height: 0)"],
    "description": "Flutter ElevatedButton snippet"
  },
  "circle avatar style1 snippet": {
    "prefix": "circleavatarstyle1",
    "body": [
      "                                SizedBox(",
      "                                  height: 30,",
      "                                  width: 30,",
      "                                  child: CircleAvatar(",
      "                                    backgroundImage: NetworkImage(",
      "                                        \"https://picsum.photos/500/300\"),",
      "                                    foregroundImage: NetworkImage(",
      "                                        \"https://cdn2.ettoday.net/images/3353/3353619.jpg\"),",
      "                                    maxRadius: 15,",
      "                                    minRadius: 15,",
      "                                  ),",
      "                                )"
    ],
    "description": "Flutter ElevatedButton snippet"
  },
  "ellipsis snippet": {
    "prefix": "ellipsis",
    "body": ["TextOverflow.ellipsis"],
    "description": "ellipsis snippet"
  },
  "ellipsis two lines snippet": {
    "prefix": "ellipsis",
    "body": [
      "           Flexible(",
      "                                    child: Text(",
      "                                  'Supporting text Supporting text Supporting text Supporting text Supporting text Supporting text',",
      "                                  style: TextStyle(",
      "                                      overflow: TextOverflow.ellipsis,",
      "                                      color: $styles.colors.mlgrey200),",
      "                                  maxLines: 2,",
      "                                ))"
    ],
    "description": "ellipsis snippet"
  }
}
